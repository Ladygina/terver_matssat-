# -*- coding: utf-8 -*-
"""dz3_stoh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16GR6Xxb-BGJR0UzRy3_PW_Ocrtxw47Hl
"""

from scipy.stats import binom
from scipy.stats import norm
from scipy.stats import chi
import numpy as np
from numpy import array
import pandas as pd
import random
import matplotlib.pyplot as plt
import math
import seaborn as sns

n=100
alpha=0.7
a=1
sigma=1.5
D_e=0.2
D_v=0.4

gamma=np.random.normal(a, np.sqrt(sigma), 1)
print(gamma)

# последовательности e_n, v_n
eps=[]
v=[]

eps=np.random.normal(0, np.sqrt(D_e), n)
v=np.random.normal(0, np.sqrt(D_v), n)

print(eps, "\n", v)

# последовательности ksi_n, eta_n

ksi=np.zeros(n)
eta=np.zeros(n)
ksi[0]=gamma
eta[0]=ksi[0]+v[0]
for i in range(1, n):
  ksi[i]=alpha*ksi[i-1]+eps[i]
  eta[i]=ksi[i]+v[i]
print(ksi, "\n", eta)

# график реализации ksi
x=np.arange(0,10,0.1)
plt.plot(x,ksi)

ro=float(D_e)/D_v
K=np.zeros(n)
K[0]=float(sigma**2)/D_v

print(ro, K[0])

ksi_predict=np.zeros(n)
ksi_predict[0]=a

# вычисление кси с крышкой - фильтра Калмана
for i in range(1, n):
  K[i]=float(alpha**2*K[i-1]+ro)/(alpha**2*K[i-1]+ro+1)
  ksi_predict[i]=alpha*ksi_predict[i-1]+K[i]*(eta[i]-alpha*ksi_predict[i-1])



print(K)
print(ksi_predict)

plt.figure(figsize=(15,10))
plt.plot(x, ksi, color="red")
plt.plot(x, ksi_predict, color="grey")
plt.legend(["ksi", "ksii_predict"])
plt.show()

x=np.arange(0,10,0.1)

ksi_pr=[ 1., 0.77721073,0.17416225,0.37035477,0.20330603,0.70085037,
  0.88174443,  0.63934551, -0.20278942, -0.45216043, -0.42789034, -0.28979599,
  0.20790825,  0.08879995,  0.34844477,  0.59621132, -0.18486961, -0.13905992,
 -0.3476953,  -0.43652902, -0.14931429, -0.29756876, -0.29568258 ,-0.22517495,
 -0.16931237,  0.78054524,  0.54336289,  0.18285729, -0.11474204, -0.06666432,
  0.18634915,  0.1035775,  -0.21399226,  0.27304219,  0.65454622,  0.14477016,
  0.4458261,  -0.01913839, -0.01640562, -0.05885659,  0.24610422 , 0.39805524,
  0.16523667, -0.26968067, -0.20729633,  0.12994235, -0.50149257, -0.32123633,
  0.23772712,  0.15412548, -0.06510108,  0.47714829,  0.54919928,  0.5901348,
  0.13482379, -0.19850154, -0.29745977, -0.32438321,  0.02219126, -0.06272911,
 -0.28740247, -0.49104241,  0.26865837,  0.46729612,  0.26998962,  0.08830709,
 -0.35495605, -0.54243769,  0.04196456, -0.27890474,  0.23852122, -0.28513358,
 -0.48444841,  0.09301211,  0.35014742, -0.23194616, -0.11444325, -0.28239903,
  0.27439785,  0.1360726,   0.12400639, -0.10831581, -0.07712728, -0.04604287,
  0.13107701,  0.0982091,   0.36818984,  0.10966559,  0.31916308,  0.09822813,
  0.03406915, -0.18517694,  0.0288446,  -0.30682269,  0.16326833,  0.04735156,
  0.07271632,  0.61367278 , 0.10446962,  0.39465698]

ksi=[ 0.74189561,  0.57985849,  0.80553285,  0.36688806,  0.54048446,  0.67151283,
  0.57937536,  0.01599648, -0.63913902, -0.57343969, -0.32933511, -0.0650684,
  0.77007512,  1.09219077,  0.06830096,  0.00206902, -0.38274355, -0.49180522,
 -0.91021841, -0.65382733, -0.50466291, -0.09483544 ,-0.47408816, -0.49743178,
 -0.51750125,  0.69776241,  0.26931481, -0.29320493,  0.24911782,  0.29436019,
 -0.16744785,  0.23642851, -0.31504759,  0.7292974,   0.62034649,  0.16075595,
 -0.04774833, -0.0378146,   0.3136421,   0.66898707,  0.27830891,  0.33112478,
  0.89531142, -0.06186365, -0.02157709, -0.02339935, -0.03466995,  0.24842953,
  0.06444936 , 0.16483612, -0.42283012, -0.22369148, -0.03743302,  0.58507122,
  0.18138754,  0.02343155, -0.03063869, -0.54477053, -0.26294636,  0.12105748,
  0.33395498,  0.4841569,   0.74162673,  0.39052475,  0.11197191, -0.12374328,
 -0.28071515, -0.35752486, -0.10117049, -0.4071254,  -0.18650867, -0.87018349,
 -0.50601983,  0.13152156, -0.17988859, -0.4496741,   0.06869828, -0.03696103,
 -0.16445875,  0.26579023,  0.0240094,  -0.04831185,  0.29027973, -0.02272667,
  0.19557435,  0.08718901,  0.58562052, -0.1320209 ,  0.71441839,  0.42767353,
  0.01549772,  0.14868235, -0.2672831,  -0.08750509, -0.36812617,  0.02075771,
 -0.28361842, -0.30183085, -0.33987209, -0.1823225 ]
eta= [0.69287444,  0.80092227, -0.24862408,  0.71131607,  0.12412837,  1.49550154,
  1.43873827,  0.67085522 ,-1.12901829 ,-0.89397321, -0.58652037, -0.27594197,
  0.79294049,  0.00799401 , 0.7561856 ,  1.09797417, -1.04257727, -0.15280562,
 -0.7042608,  -0.71161174,  0.07323318, -0.57251825, -0.42013977, -0.25109221,
 -0.18596171,  2.06103603,  0.53906339, -0.09842722, -0.46046728, -0.04721604,
  0.51821932,  0.06531234, -0.62203461,  0.875267,    1.31456693, -0.30160682,
  0.93646131, -0.49087336, -0.02069082, -0.12632705,  0.65529638,  0.71962543,
  0.003724 ,  -0.81850978, -0.23367323,  0.52168171, -1.345292,   -0.27878164,
  0.89657406,  0.13663072, -0.31148035,  1.22163032,  0.85569122,  0.8830961,
 -0.26150276, -0.615633,   -0.52321561, -0.48982591,  0.37719884, -0.1741951,
 -0.63419582, -0.90387618,  1.1408514 ,  0.86499664,  0.18863985, -0.05509434,
 -0.94854171, -0.96112195,  0.64252896, -0.71797211,  0.85629566, -0.92903429,
 -0.8901527,   0.70846709,  0.75611382, -0.91138318, -0.04619459, -0.57050856,
  0.94675324,  0.05630626,  0.16496147, -0.38621566, -0.07898765, -0.03472547,
  0.36366686,  0.1074029,   0.79467188, -0.1012191,   0.66439698, -0.08006793,
 -0.0153388,  -0.48288106,  0.25454312, -0.77257191,  0.70169739, -0.04798235,
  0.12907418,  1.41519928 ,-0.3585556,   0.85259323]

plt.figure(figsize=(15,10))
plt.plot(x, ksi, color="red")
plt.plot(x, ksi_pr, color="grey")
plt.plot(x, eta, color="green")

plt.legend(["ksi", "ksii_predict", "eta"])
plt.show()

# MSE
delta_ksi=0
for i in range(n):
  delta_ksi+=(ksi[i]-ksi_predict[i])**2
sqr_err=float(delta_ksi)/n
print("Avg_square_err=", sqr_err)





#uniform  distrib

e0=np.random.uniform(-np.sqrt(3*D_e), np.sqrt(3*D_e), n)
v0=np.random.normal(-np.sqrt(3*D_v),np.sqrt(3*D_v), n)
print(eps, "\n", v)

gamma=np.random.normal(a, sigma, 1)
print(gamma)

ksi=np.zeros(n)
eta=np.zeros(n)
ksi[0]=gamma
eta[0]=ksi[0]+v[0]
for i in range(1, n):
  ksi[i]=alpha*ksi[i-1]+eps[i]
  eta[i]=ksi[i]+v[i]
print(ksi, "\n", eta)

ro=float(D_e)/D_v
K=np.zeros(n)
K[0]=sigma**2/D_v

ksi_predict=np.zeros(n)
ksi_predict[0]=a

for i in range(1, n):
  K[i]=float(alpha**2*K[i-1]+ro)/(alpha**2*K[i-1]+ro+1)
  ksi_predict[i]=alpha*ksi_predict[i-1]+K[i]*(eta[i]-alpha*ksi_predict[i-1])
print(ksi_predict)
print(K)

plt.figure(figsize=(15,10))
plt.plot(x, ksi, color="red")
plt.plot(x, ksi_predict, color="grey")
plt.legend(["ksi", "ksii_predict"])
plt.show()

ksi_pr=[ 1. ,         0.43704757, -0.0980745 ,  0.16828092 , 0.05727707,  0.5967583,
  0.80811094,  0.58748585, -0.23922123, -0.47771617, -0.44580135, -0.30234275,
  0.1991218 ,  0.0826479 ,  0.34413771,  0.59319612, -0.18698035, -0.14053749,
 -0.34872962, -0.43725305, -0.14982111, -0.29792354, -0.29593092, -0.22534879,
 -0.16943406,  0.78046006,  0.54330326,  0.18281555, -0.11477126, -0.06668477,
  0.18633483,  0.10356748, -0.21399928,  0.27303728,  0.65454278,  0.14476775,
  0.44582441, -0.01913957, -0.01640644, -0.05885717,  0.24610381,  0.39805496,
  0.16523647, -0.26968081, -0.20729643,  0.12994228, -0.50149262, -0.32123636,
  0.2377271,   0.15412547, -0.06510109,  0.47714828,  0.54919928,  0.59013479,
  0.13482379, -0.19850154, -0.29745978, -0.32438321,  0.02219126, -0.06272911,
 -0.28740247, -0.49104241,  0.26865837,  0.46729612,  0.26998962,  0.08830709,
 -0.35495605, -0.54243769,  0.04196456, -0.27890474,  0.23852122, -0.28513358,
 -0.48444841,  0.09301211,  0.35014742, -0.23194616, -0.11444325, -0.28239903,
  0.27439785,  0.1360726 ,  0.12400639, -0.10831581, -0.07712728, -0.04604287,
  0.13107701,  0.0982091,   0.36818984,  0.10966559,  0.31916308,  0.09822813,
  0.03406915, -0.18517694,  0.0288446 , -0.30682269,  0.16326833,  0.04735156,
  0.07271632,  0.61367278,  0.10446962,  0.39465698]

ksi=[ 1.06712968e-01,  1.35230644e-01 , 4.94293354e-01,  1.49020413e-01,
  3.87977113e-01,  5.64757683e-01,  5.04646753e-01, -3.63135384e-02,
 -6.75756037e-01, -5.99071601e-01, -3.47277443e-01, -7.76280366e-02,
  7.61283379e-01,  1.08603655e+00,  6.39930013e-02, -9.46544417e-04,
 -3.84854443e-01, -4.93282845e-01, -9.11252748e-01, -6.54551369e-01,
 -5.05169737e-01, -9.51902186e-02, -4.74336502e-01, -4.97605618e-01,
 -5.17622934e-01,  6.97677224e-01,  2.69255184e-01, -2.93246669e-01,
  2.49088604e-01,  2.94339734e-01, -1.67462163e-01,  2.36418489e-01,
 -3.15054601e-01,  7.29292487e-01,  6.20343050e-01,  1.60753541e-01,
 -4.77500152e-02, -3.78157821e-02,  3.13641277e-01,  6.68986490e-01,
  2.78308509e-01,  3.31124496e-01,  8.95311219e-01, -6.18637889e-02,
 -2.15771824e-02, -2.33994204e-02, -3.46699971e-02,  2.48429498e-01,
  6.44493352e-02,  1.64836106e-01, -4.22830129e-01, -2.23691486e-01,
 -3.74330284e-02,  5.85071221e-01,  1.81387533e-01,  2.34315499e-02,
 -3.06386950e-02, -5.44770528e-01, -2.62946362e-01,  1.21057478e-01,
  3.33954975e-01,  4.84156899e-01,  7.41626730e-01,  3.90524747e-01,
  1.11971910e-01, -1.23743281e-01, -2.80715150e-01, -3.57524860e-01,
 -1.01170494e-01, -4.07125400e-01, -1.86508668e-01, -8.70183492e-01,
 -5.06019832e-01,  1.31521558e-01, -1.79888589e-01, -4.49674095e-01,
  6.86982844e-02, -3.69610289e-02, -1.64458751e-01,  2.65790231e-01,
  2.40094009e-02, -4.83118525e-02,  2.90279729e-01, -2.27266714e-02,
  1.95574355e-01,  8.71890095e-02,  5.85620518e-01, -1.32020902e-01,
  7.14418387e-01,  4.27673532e-01,  1.54977234e-02,  1.48682348e-01,
 -2.67283105e-01, -8.75050854e-02, -3.68126165e-01,  2.07577060e-02,
 -2.83618421e-01, -3.01830850e-01, -3.39872087e-01, -1.82322504e-01]
eta=[ 5.76918028e-02,  3.56294425e-01, -5.59863571e-01,  4.93448425e-01,
 -2.83789802e-02,  1.38874639e+00,  1.36400967e+00,  6.18545199e-01,
 -1.16563531e+00, -9.19605119e-01 ,-6.04462704e-01, -2.88501610e-01,
  7.84148743e-01,  1.83978491e-03,  7.51877643e-01,  1.09495861e+00,
 -1.04468817e+00, -1.54283249e-01, -7.05295141e-01, -7.12335781e-01,
  7.27263563e-02, -5.72873026e-01, -4.20388119e-01, -2.51266047e-01,
 -1.86083402e-01,  2.06095085e+00,  5.39003759e-01, -9.84689629e-02,
 -4.60496494e-01, -4.72364884e-02,  5.18205006e-01,  6.53023224e-02,
 -6.22041629e-01,  8.75262092e-01,  1.31456349e+00, -3.01609222e-01,
  9.36459629e-01, -4.90874538e-01, -2.06916458e-02, -1.26327624e-01,
  6.55295979e-01,  7.19625144e-01,  3.72380103e-03, -8.18509914e-01,
 -2.33673329e-01,  5.21681638e-01, -1.34529205e+00, -2.78781673e-01,
  8.96574039e-01,  1.36630699e-01, -3.11480364e-01,  1.22163031e+00,
  8.55691211e-01,  8.83096099e-01, -2.61502762e-01, -6.15632998e-01,
 -5.23215614e-01, -4.89825909e-01,  3.77198840e-01, -1.74195098e-01,
 -6.34195820e-01, -9.03876181e-01,  1.14085140e+00 , 8.64996640e-01,
  1.88639851e-01, -5.50943415e-02, -9.48541714e-01, -9.61121945e-01,
  6.42528955e-01, -7.17972108e-01,  8.56295663e-01, -9.29034288e-01,
 -8.90152699e-01,  7.08467094e-01,  7.56113819e-01, -9.11383183e-01,
 -4.61945859e-02, -5.70508562e-01,  9.46753239e-01,  5.63062570e-02,
  1.64961473e-01, -3.86215665e-01, -7.89876540e-02, -3.47254693e-02,
  3.63666859e-01,  1.07402902e-01,  7.94671876e-01, -1.01219097e-01,
  6.64396978e-01, -8.00679326e-02, -1.53388031e-02, -4.82881060e-01,
  2.54543121e-01, -7.72571906e-01,  7.01697390e-01, -4.79823466e-02,
  1.29074183e-01,  1.41519928e+00, -3.58555597e-01,  8.52593229e-01]


plt.figure(figsize=(15,10))
plt.plot(x, ksi, color="red")
plt.plot(x, ksi_pr, color="grey")
plt.plot(x, eta, color="green")

plt.legend(["ksi", "ksii_predict", "eta"])
plt.show()

delta_ksi=0
for i in range(n):
  delta_ksi+=(ksi[i]-ksi_predict[i])**2
print("Avg_square_err=", float(delta_ksi)/n)